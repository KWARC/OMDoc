<?xml version="1.0" encoding="utf-8"?>



<omdoc xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns="http://omdoc.org/ns"
xml:id="polyslp-omdoc">


  <dc:title>The OpenMath Content Dictionary polyslp.ocd  in OMDoc form</dc:title>
  <dc:creator role="trl">Michael Kohlhase</dc:creator>
  <dc:creator role="ant">The OpenMath Society</dc:creator>
  <dc:date> 2000-02-11T00:00:00</dc:date>
  <dc:source>Derived from the OpenMath CD http://www.openmath.org/cd/polyslp.ocd.</dc:source>
  <dc:type>Text</dc:type>
  <dc:format>application/omdoc+xml</dc:format>
  <dc:rights>Copyright (c) 2000-2002 Michael Kohlhase;
    This OMDoc content dictionary is released under the OpenMath license:
    http://monet.nag.co.uk/openmath/cdfiles/license.html
  </dc:rights>
  <dc:description>
    This CD contains operators to deal with polynomials and more precisely 
    polynomials held in Straight Line Program representation.
  </dc:description>


<theory xml:id="polyslp" cdbase="http://www.openmath.org/cd">
  <include from="sts.omdoc#sts"/>
  <include from="polysts.omdoc#polysts"/>
  <include from="setname1.omdoc#setname1"/>
  <include from="opnode.omdoc#opnode"/>
  <include from="relation1.omdoc#relation1"/>
  <include from="poly.omdoc#poly"/>
  <include from="typesorts.omdoc#typesorts"/>

<omtext xml:id="CDComment-10" type="introduction">
  <CMP>
    Definition of data-structure constructors
  </CMP>
</omtext>
<symbol name="polynomial_SLP" xml:id="polynomial_SLP">

<dc:description>
    The constructor of Polynomials built with Straight Line Program
    representation. 
    The first argument is the polynomial ring containing the polynomial 
    built with <legacy format="mocktex">poly_ring_SLP</legacy>,
    The second argument is the program body built with ProgBody. 
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
	<OMV name="SLProgram"/>
	<OMV name="SLPPolynomial"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>

<code xml:id="stlp">
  <data format="text/plain"><![CDATA[
line 1 : InputNode	x
line 2 : InputNode	y
line 3 : OperationNode 	times line 1, line 1
line 4 : OperationNode 	times line 2, line 2
line 5 : OperationNode 	plus line 3, line 4 &gt;]]>
  </data>
</code>

<example xml:id="polynomial_SLP-ex-1" type="for" for="#polynomial_SLP">
  <CMP> The polynomial <legacy format="mocktex">x^2 + y^2</legacy>,
    which may be represented as the Straight Line Program:
    <omlet action="display" data="#stlp"/> may be encoded as:</CMP>
<OMOBJ xmlns="http://www.openmath.org/OpenMath">
  <OMA>
    <OMS cd="polyslp" name="polynomial_SLP"/>
    <OMA>
      <OMS cd="polyslp" name="poly_ring_SLP"/>
      <OMS cd="setname1" name="Z"/>
      <OMV name="x"/>
      <OMV name="y"/>
    </OMA>
    <OMA>
      <OMS cd="polyslp" name="prog_body"/>
      <OMA>
	<OMS cd="polyslp" name="inp_node"/>
	<OMV name="x"/>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="inp_node"/>
	<OMV name="y"/>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="op_node"/>
	<OMS cd="opnode" name="times"/>
	<OMI> 1 </OMI>
	<OMI> 1 </OMI>
      </OMA>
      <OMA>
	<OMS cd="polyslp" name="op_node"/>
	<OMS cd="opnode" name="times"/>
	<OMI> 2 </OMI>
	<OMI> 2 </OMI>
      </OMA>
      <OMA>
	<OMS cd="opnode" name="return"/>
	<OMA>
	  <OMS cd="polyslp" name="op_node"/>
	  <OMS cd="opnode" name="plus"/>
	  <OMI> 3 </OMI>
	  <OMI> 4 </OMI>
	</OMA>
      </OMA>
    </OMA>
  </OMA>
</OMOBJ>
</example>
<symbol name="prog_body" xml:id="prog_body">

<dc:description>
    the constructor of the body of the straight line program
    the arguments represent straight line instructions, as constructed by the
    following three constructors, <legacy format="mocktex">op_node</legacy>,
    <legacy format="mocktex">inp_node</legacy> and
    <legacy format="mocktex">const_node</legacy>. The order
    is taken to be the order in which they appear
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLInstructionList"/>
	<OMV name="SLProgram"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="op_node" xml:id="op_node">

<dc:description>
    This constructor takes three or four arguments.
    The first argument is a symbol from opnode, meant to specify
    whether the node is a plus, minus times or divide node, 
    the second and third arguments are integers, which are pointers
    to the lines which are the arguments of the operation
    The optional fourth argument is from opnode if it exists it must
    be return to specify that this is a return value of the straight
    line program.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMS name="Object" cd="sts"/>
	<OMS name="N" cd="setname1"/>
	<OMS name="N" cd="setname1"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="inp_node" xml:id="inp_node">

<dc:description>
    This constructor takes one argument, which is a variable the return value
    is intended to represent an input node.
    variables. 
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="PolynomialVariable"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="const_node" xml:id="const_node">

<dc:description>
    This constructor takes one argument, which is a value of type PolyRingslp
    it is intended to represent a constant node
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="Ring"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<omtext xml:id="CDComment-16" type="introduction">
  <CMP>
    Definition of some functions which are specific to slps
  </CMP>
</omtext>
<symbol name="length" xml:id="length">

<dc:description>
    A unary function taking an slp as argument and returning the
    length of this slp.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="depth" xml:id="depth">

<dc:description>
    A unary function taking an slp as argument and returning the
    greatest depth of any leaf node, that is the greatest contiguous
    path to any leaf node.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="slp_degree" xml:id="slp_degree">

<dc:description>
    A unary function taking an slp as argument and returning the
    apparent multiplicative degree of the slp, without performing
    any cancellation.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<assertion xml:id="slp_degree-prop-1" type="lemma">
  <CMP> The slp degree of the polynomial x &gt; degree(x) </CMP>
  <FMP>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS cd="relation1" name="gt"/>
	<OMA>
	  <OMS cd="polyslp" name="slp_degree"/>
	  <OMV name="x"/>
	</OMA>
	<OMA>
	  <OMS cd="poly" name="degree"/>
	  <OMV name="x"/>
	</OMA>
      </OMA>
    </OMOBJ>
  </FMP>
</assertion>
<example xml:id="slp_degree-ex-3" type="for" for="#slp_degree">
  <CMP>
    <legacy format="mocktex">slpDegree(convert(x^2)@poly_ring_SLP - convert(x^2)@poly_ring_SLP) = 2</legacy></CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS cd="relation1" name="eq"/>
      <OMA>
	<OMS cd="polyslp" name="polynomial_SLP"/>
	<OMA>
	  <OMS cd="polyslp" name="poly_ring_SLP"/>
	  <OMS name="Z" cd="setname1"/>
	  <OMV name="x"/>
	</OMA>
	<OMA>
	  <OMS cd="polyslp" name="prog_body"/>
	  <OMA>
	    <OMS cd="polyslp" name="inp_node"/>
	    <OMV name="x"/>
	  </OMA>
	  <OMA>
	    <OMS cd="polyslp" name="op_node"/>
	    <OMS cd="opnode" name="times"/>
	    <OMI> 1 </OMI>
	    <OMI> 1 </OMI>
	  </OMA>
	  <OMA>
	    <OMS cd="opnode" name="return"/>
	    <OMA>
	      <OMS cd="polyslp" name="op_node"/>
	      <OMS cd="opnode" name="minus"/>
	      <OMI> 2 </OMI>
	      <OMI> 2 </OMI>
	    </OMA>
	  </OMA>
	</OMA>
      </OMA>
      <OMI> 2 </OMI>
    </OMA>
  </OMOBJ>
</example>
<symbol name="return_node" xml:id="return_node">

<dc:description>
    Takes an slp as the argument
    returns the return node of the slp.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="node_selector" xml:id="node_selector">

<dc:description>
    Takes an slp as the first argument, the second argument is the
    position of the required node. Returns the node of the slp at
    this position.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="N" cd="setname1"/>
	<OMV name="SLPInstruction"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="left_ref" xml:id="left_ref">

<dc:description>
    Takes as argument a node of an slp.
    returns the value of the left hand pointer of the node.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPInstruction"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="right_ref" xml:id="right_ref">

<dc:description>
    Takes as argument a node of an slp.
    returns the value of the right hand pointer of the node.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPInstruction"/>
	<OMS name="N" cd="setname1"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<omtext xml:id="CDComment-24" type="introduction">
  <CMP>
    Definition of some functions which are very useful for slps
  </CMP>
</omtext>
<symbol name="quotient" xml:id="quotient">

<dc:description>
    A quotient function for polynomials represented by slps. It is a
    requirement that this is an exact division.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="monte_carlo_eq" xml:id="monte_carlo_eq">

<dc:description>
    This is a Monte-Carlo equality test,
    it takes three arguments, the first two are slps representing
    polynomials, the third argument is the maximum probability of
    incorrectness that is required of the equality test.
    (Monte-Carlo equality tests are very important for slps as they
    offer the only tractable method of solving the equality problem
    in many cases)
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="SLPPolynomial"/>
	<OMV name="SLPPolynomial"/>
	<OMS name="Prop" cd="typesorts"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="poly_ring_SLP" xml:id="poly_ring_SLP">

<dc:description>
    The constructor of the polynomial ring. The first argument is a ring, 
    (the ring of the coefficients), the rest are the variables, in any order
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMV name="Ring"/>
	</OMA>
	<OMA>
	  <OMS name="nary" cd="sts"/>
	  <OMV name="PolynomialVariable"/>
	</OMA>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="poly_ring_SLP-ex-1" type="for" for="#poly_ring_SLP">
  <CMP>
    An example to represent a polynomial ring over the integers, with the
    two variables x,y. viz. Z[x,y]</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="poly_ring_SLP" cd="polyslp"/>
      <OMS name="Z" cd="setname1"/>
      <OMV name="x"/>
      <OMV name="y"/>
    </OMA>
  </OMOBJ>
</example>
</theory>
</omdoc>
