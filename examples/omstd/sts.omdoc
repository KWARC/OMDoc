<?xml version="1.0" encoding="utf-8"?>


<omdoc xmlns:dc="http://purl.org/dc/elements/1.1/"  
       xmlns="http://omdoc.org/ns"
       xmlns:om="http://www.openmath.org/OpenMath"
       xmlns:m="http://www.w3.org/1998/Math/MathML"
       xmlns:o="http://omdoc.org/ns"
       xml:id="sts-omdoc">

<metadata>
  <dc:title>The OpenMath Content Dictionary sts.ocd  in OMDoc form</dc:title>
  <dc:creator role="trl">Michael Kohlhase</dc:creator>
  <dc:creator role="ant">The OpenMath Society</dc:creator>
  <dc:date> 2001-03-12T00:00:00</dc:date>
  <dc:source>Derived from the OpenMath CD http://www.openmath.org/cd/sts.ocd.</dc:source>
  <dc:type>Text</dc:type>
  <dc:format>application/omdoc+xml</dc:format>
  <dc:rights>Copyright (c) 2000-2002 Michael Kohlhase;
    This OMDoc content dictionary is released under the OpenMath license:
    http://monet.nag.co.uk/openmath/cdfiles/license.html
  </dc:rights>
  <dc:description> 
    Definitions of the symbols used by the OpenMath Small Type System.
  </dc:description>
</metadata>

<theory xml:id="sts">

<symbol name="type" xml:id="type" role="semantic-attribution">
<metadata>
<dc:description> 
    A symbol to be used within an OpenMath attribute to specify the type of the object.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMS name="attribution" cd="sts"/>
    </OMOBJ>
  </type>
</symbol>

  <notation>
    <prototype>
      <om:OMATTR>
        <om:OMATP>
          <om:OMS cd="sts" name="type"/>
          <expr name="val"/>
        </om:OMATP>
        <expr name="scope"/>
      </om:OMATTR>
    </prototype>
    <prototype>
      <m:semantics>
        <expr name="scope"/>
        <m:annotation-xml cd="sts" name="type">
          <expr name="val"/>
        </m:annotation-xml>
      </m:semantics>
    </prototype>
    <rendering>
      <m:msub>
        <render name="scope"/>
        <render name="val"/>
      </m:msub>
    </rendering>
  </notation>


<symbol name="mapsto" xml:id="mapsto">
<metadata>
<dc:description>
    This symbol represents the construction of a function type.

The first n-1 children denote the types of the arguments,
the last denotes the return type.
</dc:description>
</metadata>
<type system="#sts">
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS cd="sts" name="mapsto"/>
      <OMA>
	<OMS cd="sts" name="nary"/>
	<OMV name="AnyType"/>
      </OMA>
      <OMV name="FunctionType"/>
    </OMA>
  </OMOBJ>
</type>
</symbol>

  <notation>
    <prototype>
      <om:OMA>
        <om:OMS cd="sts" name="mapsto" o:cr="fun"/>
        <exprlist name="dom"><expr name="arg"/></exprlist>
        <expr name="codom"/>
      </om:OMA>
    </prototype>
    <prototype>
      <m:apply>
        <m:csymbol cd="sts" o:cr="fun">mapsto</m:csymbol>
        <exprlist name="dom"><expr name="arg"/></exprlist>
        <expr name="codom"/>
      </m:apply>
    </prototype>
    <rendering>
      <m:mrow>
	<iterate name="dom">
	  <separator><m:mo>&#x2297;</m:mo></separator>
	  <render name="arg"/>
	</iterate>
	<m:mo o:cr="fun">â†¦</m:mo><render name="codom"/>
      </m:mrow>
    </rendering>
  </notation>

<symbol name="nary" xml:id="nary">
<metadata>
<dc:description>
    Constructs a child of mapsto which denotes an arbitrary number of
    copies of the argument of nary.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS cd="sts" name="mapsto"/>
	<OMV name="Type"/>
	<OMV name="Tuple"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>

  <notation>
    <prototype>
      <om:OMA>
        <om:OMS cd="sts" name="nary" o:cr="fun"/>
        <expr name="arg"/>
      </om:OMA>
    </prototype>
    <prototype>
      <m:apply>
        <m:csymbol cd="sts" o:cr="fun">nary</m:csymbol>
        <expr name="arg"/>
      </m:apply>
    </prototype>
    <rendering>
      <m:msup>
          <render name="arg"/>
	  <m:mo o:cr="fun">*</m:mo>
      </m:msup>
    </rendering>
  </notation>

<example xml:id="nary-ex-1" type="for" for="#nary">
  <CMP>The signature for list, an n-ary function:</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="mapsto" cd="sts"/>
      <OMA>
	<OMS name="nary" cd="sts"/>
	<OMS name="Object" cd="sts"/>
      </OMA>
      <OMS name="Object" cd="sts"/>
    </OMA>
  </OMOBJ>
</example>

<symbol name="nassoc" xml:id="nassoc">
<metadata>
<dc:description> 
    Constructs a child of mapsto which denotes an arbitrary number of
    copies of the argument of nassoc. The operator is associative on these
    arguments which means that repeated uses may be flattened/unflattened.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS cd="sts" name="mapsto"/>
	<OMV name="Type"/>
	<OMV name="Tuple"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>

  <notation>
    <prototype>
      <om:OMA>
        <om:OMS cd="sts" name="nassoc" o:cr="fun"/>
        <expr name="arg"/>
      </om:OMA>
    </prototype>
    <prototype>
      <m:apply>
        <m:csymbol cd="sts" o:cr="fun">nassoc</m:csymbol>
        <expr name="arg"/>
      </m:apply>
    </prototype>
    <rendering>
      <m:msup>
          <render name="arg"/>
	  <m:mo o:cr="fun">*</m:mo>
      </m:msup>
    </rendering>
  </notation>

<example xml:id="nassoc-ex-1" type="for" for="#nassoc">
  <CMP>The signature for plus, an associative n-ary function:</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="mapsto" cd="sts"/>
      <OMA>
	<OMS name="nassoc" cd="sts"/>
	<OMV name="AbelianSemiGroup"/>
      </OMA>
      <OMV name="AbelianSemiGroup"/>
    </OMA>
  </OMOBJ>
</example>

<symbol name="error" xml:id="error">
<metadata>
<dc:description>
    The error symbol is the 'return type' of error symbols in the error
    signature file.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS cd="sts" name="mapsto"/>
	<OMV name="String"/>
	<OMV name="Error"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="error-ex-1" type="for" for="#error">
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS cd="sts" name="mapsto"/>
      <OMV name="OMSymbol"/>
      <OMS name="error" cd="sts"/>
    </OMA>
  </OMOBJ>
</example>

<symbol name="structure" xml:id="structure">
<metadata>
<dc:description> 
    The structure element is used to represent a structure of a particular
    (algebraic) type.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS cd="sts" name="mapsto"/>
	<OMV name="Category"/>
	<OMV name="Domain"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>

  <notation>
    <prototype>
      <om:OMS cd="sts" name="structure"/>
    </prototype>
    <prototype>
      <m:csymbol cd="sts">structure</m:csymbol>
    </prototype>
    <rendering>
      <!--IMPROVEME: the following is just a fallback-->
      <m:mo>structure</m:mo>
    </rendering>
  </notation>

<example xml:id="structure-ex-1" type="for" for="#structure">
  <CMP>The signature of a function which given a set will return an element
    of that set:</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS cd="sts" name="mapsto"/>
      <OMA>
	<OMS cd="sts" name="structure"/>
	<OMV name="set"/>
      </OMA>
      <OMV name="set"/>
    </OMA>
  </OMOBJ>
</example>
<symbol name="binder" xml:id="binder">
<metadata>
<dc:description>
    An `OMBIND' object has three parts: a "binder" such as "lambda" or
    "for all", a (list of) bound variables, and an expression.  The use of
    `binder' in a signature indicates that we are describing something
    which can only be used as the first child of an OMBIND construct.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMV name="Symbol"/>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="binder-ex-1" type="for" for="#binder">
  <CMP>The signature of forall is:</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath"><OMS name="binder" cd="sts"/></OMOBJ>
</example>
<symbol name="attribution" xml:id="attribution">
<metadata>
<dc:description>
    An `attribution' object consists of pairs of keys and values.  The use
    of the symbol `attribution' in a signature indicates that the symbol
    is to be used as a key.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMV name="Symbol"/>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="attribution-ex-1" type="for" for="#attribution">
  <OMOBJ xmlns="http://www.openmath.org/OpenMath"><OMS name="attribution" cd="sts"/></OMOBJ>
</example>
<symbol name="Object" xml:id="Object">
<metadata>
<dc:description>
    Denotes any OpenMath object.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMV name="Symbol"/>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="Object-ex-1" type="for" for="#Object">
  <CMP>
    The signature for list, to show that list has the signature:
    Object* -&gt; Object</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="mapsto" cd="sts"/>
      <OMA>
	<OMS name="nary" cd="sts"/>
	<OMS name="Object" cd="sts"/>
      </OMA>
      <OMS name="Object" cd="sts"/>
    </OMA>
  </OMOBJ>
</example>

<symbol name="NumericalValue" xml:id="NumericalValue">
<metadata>
<dc:description>
    Denotes an OpenMath object that is to be thought of as something that
    represents a numerical value, or a numerical value.
</dc:description>
</metadata>
<type system="#sts">
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMV name="Symbol"/>
    </OMOBJ>
  </type>
</symbol>

  <notation>
    <prototype>
      <om:OMS cd="sts" name="NumericalValue"/>
    </prototype>
    <prototype>
      <m:csymbol cd="sts">NumericalValue</m:csymbol>
    </prototype>
    <rendering xml:lang="en">
      <m:mo>Num</m:mo>
    </rendering>
  </notation>

<example xml:id="NumericalValue-ex-1" type="for" for="#NumericalValue">
  <CMP>The generic signature for the function power:</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="mapsto" cd="sts"/>
      <OMS name="NumericalValue" cd="sts"/>
      <OMS name="NumericalValue" cd="sts"/>
      <OMS name="NumericalValue" cd="sts"/>
    </OMA>
  </OMOBJ>
</example>

<theory xml:id="sts-nonconstitutive">
<imports  from="setname1.omdoc#setname1"/>

<example xml:id="type-ex-1" type="for" for="#type">
  <CMP>The variable z is attributed with a type for complex numbers.</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMATTR>
      <OMATP>
	<OMS cd="sts" name="type"/>
	<OMS name="C" cd="setname1"/>
      </OMATP>
      <OMV name="z"/>
    </OMATTR>
  </OMOBJ>
</example>

<example xml:id="mapsto-ex-1" type="for" for="#mapsto">
  <CMP>The signature of the power function: (Real , Integer) -&gt; Real</CMP>
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS cd="sts" name="mapsto"/>
      <OMS cd="setname1" name="R"/>
      <OMS cd="setname1" name="Z"/>
      <OMS cd="setname1" name="R"/>
    </OMA>
  </OMOBJ>
</example>
</theory>

<symbol name="oftype"/>

  <notation>
    <prototype>
      <om:OMA>
	<om:OMS cd="sts" name="oftype"/>
	<expr name="obj"/>
	<expr name="type"/>
      </om:OMA>
    </prototype>
    <prototype>
      <m:apply>
	<m:csymbol cd="sts">oftype</m:csymbol>
	<expr name="obj"/>
	<expr name="type"/>
      </m:apply>
    </prototype>
    <rendering>
      <m:mrow>
	<render name="obj"/>
	<m:mo>:</m:mo>
        <render name="type"/>
      </m:mrow>
    </rendering>
  </notation>

  
</theory>

</omdoc>

