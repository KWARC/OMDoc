<?xml version="1.0" encoding="utf-8"?>



<omdoc xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns="http://omdoc.org/ns"
xml:id="polyd-omdoc">


  <dc:title>The OpenMath Content Dictionary polyd.ocd  in OMDoc form</dc:title>
  <dc:creator role="trl">Michael Kohlhase</dc:creator>
  <dc:creator role="ant">The OpenMath Society</dc:creator>
  <dc:date> 1999-07-07T00:00:00</dc:date>
  <dc:source>Derived from the OpenMath CD http://www.openmath.org/cd/polyd.ocd.</dc:source>
  <dc:type>Text</dc:type>
  <dc:format>application/omdoc+xml</dc:format>
  <dc:rights>Copyright (c) 2000-2002 Michael Kohlhase;
    This OMDoc content dictionary is released under the OpenMath license:
    http://monet.nag.co.uk/openmath/cdfiles/license.html
  </dc:rights>
  <dc:description>
    This CD contains operators to deal with polynomials and more precisely 
    Distributed Multivariate Polynomials.
  </dc:description>


<theory xml:id="polyd" cdbase="http://www.openmath.org/cd">

<include from="sts.omdoc#sts"/>
<include from="polysts.omdoc#polysts"/>
<include from="setname1.omdoc#setname1"/>

<omtext xml:id="CDComment-10" type="introduction">
  <CMP>
    Original OpenMath v1.1 Poly 1997
    Update to Current Format 1999-07-07 DPC
    Move the names of rings to setname.ocd 1999-11-09 JHD
    Delete those items moved to the new poly.ocd 1999-11-14 JHD
  </CMP>
</omtext>
<omtext xml:id="CDComment-11" type="introduction">
  <CMP>

This is our attempt at defining a first Content Dictionary to deal with
polynomials. There are many possible choices for a polynomial CD, and
several questions to answer. 

The reader may feel that this content dictionary is quite different in
spirit from the "Basic" one. Although it basically defines a set of concepts
related to polynomials (such as degree, factorization, resultant...), there
are two new points here:
- a certain emphasis on representation issues (including structural
constraints on some OM objects),
- an attempt to specify some "computational behaviour" of an OM application
that handles (part of) this CD.

As some people may disagree with some of our choices, we will try to justify
them in this rather long foreword. 

1. Representation issues

One of the interest of OM is certainly to enable the use of specialized
servers. It is important to promote the writing of OM-compliant servers by
placing as few constraints as possible on the programmers of these
packages. This CD has been designed with the idea that it could be simple to
use for a server dealing only with polynomial computations. Hence we have
used a particular representation for polynomials (distributed with dense
monomials). This representation is rather abstract in the sense that it does
not introduce names for variables. It explicitly contains the polynomial
ring a polynomial belongs to as the set of the coefficients and the number
of variables. It seems (from our experience) that this information is
necessary for most specialized servers. 

Expressing constraints on the structure of OM objects made from the symbols
in this CD is not always easy. One of the main reason is that a symbol such
as "gcd" is meant to denote the GCD of a set of polynomials, no matter how
the polynomials are represented. Such a function should thus accept both
"symbolic" arguments (a list of symbolic object meant to be polynomials) and
the polynomials in the specific representation defined in this CD. Of
course, another solution will be to have one "gcd" for one (or several)
particular representation and another "gcd" to express the general notion
of polynomial "gcd". We though that the solution we chose was more in the
spirit of "Basic" and the discussions of the last OpenMath meeting.

A question which is not entirely answered is whether or not it is
interesting to have "symbolic" objects inside some constructors (such as a
power which is not an OM integer in "Monom" or a symbolic "PolyRingD" (a
variable) as an argument of "DMP"). We explicitly forbid that in the first
version of this CD.

Note that we did not try to express the constraints with signatures in this
version because we did not find a really satisfactory solution.

2. Specifying some "computational behaviour"

Of course it would be of no use to exactly specify the behaviour of any OM
application that receives an OM object. There are (at least) two reasons for
that:
- an OM object is intended to represent a mathematical object and thus the
same OM object could be sent to a typesetter as well as to a symbolic
computation system,
- even when dealing with programs that compute, exact specifications could be
impossible or too much constraining for a given system.

On the other hand, we believe that one of the goal of OM is certainly that a
program needing to factorize an integer could transparently use Maple, Axiom
or Pari to do the job. This is of course possible only if all severs that
"implement" (in the sense of really performing) the mathematical notion of
integer factorization answer in a similar way. In other words, we should not
hesitate to specify what a particulary useful class of OM applications (the
"computing" ones) should return (the form of the result) everytime
compliance to this specification is simple enough because it is obviously
very useful. We have tried to express this idea in this CD through some
comments and the use of symbols such as "factored" or <legacy format="mocktex">groebner_basis</legacy> that
describe the required results of some functions. 

The general "compliance" rule can be stated as:
an OM application that understands this CD and implements some of the 
polynomials operation described is required to implement them using the
constructors defined in this CD, as indicated in the comments associated
with the operations.

This means that if the OM version of a computer algebra system claims to
implement polynomial factorization, another application can send him an
OM object as described in the "factor" comment (the symbol "factor" applied
to one argument, a DMP) and the result will be return as defined : a 
"factored" symbol whose arguments are described in the corresponding entry
of the poly CD.
</CMP>
</omtext>

<omtext xml:id="CDComment-12" type="introduction">
  <CMP>
    Definition of data-structure constructors
  </CMP>
</omtext>

<omtext xml:id="CDComment-13" type="introduction">
  <CMP>
    The polynomial <legacy format="mocktex">x^2*y^6 + 3*y^5</legacy> can be encoded as
    <legacy format="mocktex">DMP(poly_ring_d(Z, 2), SDMP(term(1, 2, 6), term(3, 0, 5)))</legacy>

    The polynomial <legacy format="mocktex">2*y^3*z^5 + x + 1</legacy> can be
    <legacy format="mocktex">DMP(poly_ring_d(Q, 3), SDMP(term(2, 0, 3, 5), term(1, 1, 0, 0), term(1, 0, 0, 0)))</legacy>

    Note that these are not real encodings but a "term-like" encoding (whose
    understanding should be trivial) meant for the human readers of this
    dictionary. Of course, actual encodings can be more compact...
  </CMP>
</omtext>

<symbol name="DMP" xml:id="DMP">

<dc:description>
    The constructor of DMPs. The first argument is the polynomial
    ring containing the polynomial and the second is a "SDMP". 
    Should be of the form DMP(PolyRingD(...), SDMP(...))
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
	<OMV name="SDMPObject"/>
	<OMS name="polynomial_ring" cd="polysts"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="DMPL" xml:id="DMPL">

<dc:description>
    The constructor for lists of multivariate polynomial members of the 
    same polynomial ring. The first argument is a polynomial ring
    and the rest are "SDMP"s. DMPL can be attributed with the "ordering" 
    symbol to indicate a particular ordering for monomials of all its
    polynomials. 
    Should be of the form DMPL(PolyRingD(...), SDMP(...)+)
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="structure" cd="sts"/>
	  <OMS name="polynomial_ring" cd="polysts"/>
	</OMA>
	<OMA>
	  <OMS name="nary" cd="sts"/>
	  <OMS name="SDMP" cd="polyd"/>
	</OMA>
	<OMV name="polynomial_ringList"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="SDMP" xml:id="SDMP">

<dc:description>
    The constructor for multivariate polynomials without
    any indication of variables or domain for the coefficients.
    Its arguments are just "monomial"s. No monomials should differ only by
    the coefficient (i.e it is not permitted to have both "2*x*y" and
    "x*y" as monomials in a SDMP). SDMP can be attributed with 
    the "ordering" symbol to indicate a particular ordering of its
    monomials. This attribute shall not be set if the SDMP is part of 
    DMPL that has this attribute set. 
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMA>
	  <OMS name="nary" cd="sts"/>
	  <OMV name="MonomialD"/>
	</OMA>
	<OMV name="SDMPObject"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="term" xml:id="term">

<dc:description>
    The constructor of monomials. Valid applications are of the form
    Term(coeff, exp1, exp2, ... expn)
    which represents the monomial 
    <legacy format="mocktex">coeff * var1^exp1*...varn^expn</legacy>
    where n is the number of variables, expi are non-negative integers.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="Ring"/>
	<OMA>
	  <OMS name="nary" cd="sts"/>
	  <OMS name="N" cd="setname1"/>
	</OMA>
	<OMV name="MonomialD"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<omtext xml:id="CDComment-18" type="introduction">
  <CMP>
    Polynomial rings constructors
  </CMP>
</omtext>
<symbol name="poly_ring_d" xml:id="poly_ring_d">

<dc:description> 
    The constructor of polynomial ring. The first argument is a ring
    (the ring of the coefficients), the second is the number 
    of variables as an integer.
</dc:description>

</symbol>
<omtext xml:id="CDComment-20" type="introduction">
  <CMP>
    Definitions related to orderings
  </CMP>
</omtext>
<symbol name="ordering" xml:id="ordering">

<dc:description> 
    Used as an attribute to indicate an ordering of the monomials in a
    polynomial or list of polynomials. The value of this attribute
    should be one of the constructors specifying ordering. 
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMS name="Object" cd="sts"/>
    </OMOBJ>
  </type>
</symbol>
<omtext xml:id="CDComment-22" type="introduction">
  <CMP>
    The following orders on monomials have their standards definitions, 
    see, for example, "Ideals, Varieties and Algorithms", D. Cox, 
    J.B. Little and D. O'Shea, Springer Verlag.
  </CMP>
</omtext>
<symbol name="lexicographic" xml:id="lexicographic">

<dc:description> 
    The lexicographic ordering of monomials.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMS name="ordering" cd="polyd"/>
    </OMOBJ>
  </type>
</symbol>
<symbol name="reverse_lexicographic" xml:id="reverse_lexicographic">

<dc:description> 
    The reverse lexicographic ordering of monomials
</dc:description>

</symbol>
<symbol name="graded_lexicographic" xml:id="graded_lexicographic">

<dc:description> 
    Total degree order, graded with the lexicographic ordering.
</dc:description>

</symbol>
<symbol name="graded_reverse_lexicographic" xml:id="graded_reverse_lexicographic">

<dc:description> 
    Total degree order, graded with the reverse lexicographic ordering.
</dc:description>

</symbol>
<symbol name="elimination" xml:id="elimination">

<dc:description> 
    This is an ordering, which is partially in terms of one
    ordering, and partially in terms of another.
    First argument is a number of variables.
    Second is ordering to apply on the first so many variables.
    Third is an ordering on the rest, to be used to break ties.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMS name="N" cd="setname1"/>
	<OMS name="ordering" cd="polyd"/>
	<OMS name="ordering" cd="polyd"/>
	<OMS name="ordering" cd="polyd"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<example xml:id="elimination-ex-1" type="for" for="#elimination">
  <OMOBJ xmlns="http://www.openmath.org/OpenMath">
    <OMA>
      <OMS name="elimination" cd="polyd"/>
      <OMI> 1 </OMI>
      <OMS name="lexicographic" cd="polyd"/>
      <OMS name="graded_reverse_lexicographic" cd="polyd"/>
    </OMA>
  </OMOBJ>
</example>
<omtext xml:id="CDComment-28" type="introduction">
  <CMP>
    We need a few more orderings... 
  </CMP>
</omtext>
<omtext xml:id="CDComment-29" type="introduction">
  <CMP>
    Definition of some other constructors
  </CMP>
</omtext>
<symbol name="groebner_basis" xml:id="groebner_basis">

<dc:description> 
    The constructor for a Groebner basis (reduced, minimal). The first
    argument is an ordering, the second is the Groebner Basis itself
    (with respect to the ordering) that should be represented as a DMPL.
</dc:description>

</symbol>
<omtext xml:id="CDComment-31" type="introduction">
  <CMP>
    Definition of operations
  </CMP>
</omtext>
<symbol name="plus" xml:id="plus">

<dc:description>
    The sum. The argument is a DMPL. The sum lies within the same
    <legacy format="mocktex">PolyRingD</legacy> i.e. a program implementing this operation
    should return a DMP with the same <legacy format="mocktex">poly_ring_d</legacy>.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="polynomial_ringList"/>
	<OMS name="PolyRingD" cd="polyd"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="times" xml:id="times">

<dc:description>
    The product. The argument is a DMPL. The product lies within the same
    <legacy format="mocktex">PolyRingD</legacy> i.e. a program implementing this operation
    should return a DMP with the same <legacy format="mocktex">poly_ring_d</legacy>.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="polynomial_ringList"/>
	<OMS name="PolyRingD" cd="polyd"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="power" xml:id="power">

<dc:description> The power. First argument is a DMP, second
    argument is the integer power. The power lies within the same
    <legacy format="mocktex">PolyRingD</legacy>  i.e. a program implementing this operation 
    should return a DMP with the same <legacy format="mocktex">poly_ring_d</legacy>.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="PolynomialR"/>
	<OMS name="Z" cd="setname1"/>
	<OMS name="PolyRingD" cd="polyd"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="groebner" xml:id="groebner">

<dc:description> 
    The groebner basis (reduced, minimal) of a set of polynomials, with
    respect to a given ordering. First argument is an ordering, the
    second is a list of polynomials. A program that can compute
    the basis is required to return a <legacy format="mocktex">groebner_basis</legacy> object.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMS name="ordering" cd="polyd"/>
	<OMV name="polynomial_ringList"/>
	<OMV name="GroebnerBasis"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="reduce" xml:id="reduce">

<dc:description>
    The reduction of a polynomial with respect to a Groebner basis. 
    First argument is a DMP, the second argument is a <legacy format="mocktex">groebner_basis</legacy>
    object.
    i.e. a program implementing this operation should return a DMP which
    represents the polynomial reduced with respect to the Groebner basis.
</dc:description>

<type>
    <OMOBJ xmlns="http://www.openmath.org/OpenMath">
      <OMA>
	<OMS name="mapsto" cd="sts"/>
	<OMV name="polynomial_ring"/>
	<OMV name="GroebnerBasis"/>
	<OMS name="polynomial_ring" cd="polysts"/>
      </OMA>
    </OMOBJ>
  </type>
</symbol>
<symbol name="PolyRingD"/>
</theory>
</omdoc>
