<?xml version="1.0" encoding="UTF-8"?>
<!--
  A RelaxNG for Open Mathematical documents (OMDoc 1.6) Module PRES       
  $Id: notation-strict.rnc 8533 2009-09-28 05:16:15Z kohlhase $
  $HeadURL: https://svn.omdoc.org/repos/omdoc/trunk/schema/rnc/notation-strict.rnc $
  See the documentation and examples at http://www.omdoc.org
  Copyright (c) 2004-2008 Michael Kohlhase, released under the GNU Public License (GPL) 
-->
<grammar ns="http://omdoc.org/ns" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <define name="theory.class" combine="interleave">
    <zeroOrMore>
      <ref name="notation"/>
    </zeroOrMore>
  </define>
  <define name="prototype.attribs">
    <empty/>
  </define>
  <define name="prototype.model">
    <ref name="protoexp"/>
  </define>
  <define name="prototype">
    <element name="prototype">
      <interleave>
        <ref name="prototype.attribs"/>
        <ref name="prototype.model"/>
      </interleave>
    </element>
  </define>
  <define name="protoexp">
    <choice>
      <grammar>
        <include href="openmath3.rng">
          <start>
            <ref name="omel"/>
          </start>
          <define name="common.attributes">
            <interleave>
              <optional>
                <attribute name="id">
                  <data type="ID"/>
                </attribute>
              </optional>
              <parentRef name="idrest.attribs"/>
            </interleave>
          </define>
        </include>
        <define name="omel" combine="choice">
          <parentRef name="proto.class"/>
        </define>
        <define name="omvar" combine="choice">
          <parentRef name="proto.class"/>
        </define>
        <define name="common.attributes" combine="interleave">
          <parentRef name="ntn.attrib"/>
        </define>
      </grammar>
      <grammar>
        <include href="mathml3.rng">
          <start>
            <ref name="ContExp"/>
          </start>
        </include>
        <define name="ContExp" combine="choice">
          <parentRef name="proto.class"/>
        </define>
        <define name="bvar-head" combine="choice">
          <parentRef name="proto.class"/>
        </define>
      </grammar>
    </choice>
  </define>
  <!-- 		    MathML.Common.attrib &= parent ntn.attrib} -->
  <define name="precedence.att">
    <attribute name="precedence">
      <data type="integer"/>
    </attribute>
  </define>
  <define name="context.att">
    <interleave>
      <optional>
        <attribute name="xml:lang"/>
      </optional>
      <optional>
        <attribute name="context"/>
      </optional>
      <optional>
        <attribute name="variant"/>
      </optional>
    </interleave>
  </define>
  <define name="format.att">
    <optional>
      <attribute name="format"/>
    </optional>
  </define>
  <define name="rendering.attribs">
    <interleave>
      <optional>
        <ref name="precedence.att"/>
      </optional>
      <ref name="context.att"/>
      <ref name="format.att"/>
    </interleave>
  </define>
  <define name="rendering.model">
    <ref name="renderexp"/>
  </define>
  <define name="rendering">
    <element name="rendering">
      <interleave>
        <ref name="rendering.attribs"/>
        <ref name="rendering.model"/>
      </interleave>
    </element>
  </define>
  <define name="renderexp">
    <choice>
      <grammar>
        <include href="mathml3-common.rng">
          <start>
            <ref name="PresentationExpression"/>
          </start>
        </include>
        <include href="mathml3-presentation.rng"/>
        <define name="PresExp" combine="choice">
          <parentRef name="render.class"/>
        </define>
        <!-- 		                    MathML.Common.attrib &= parent ntn.attrib -->
        <define name="mtable.content.class" combine="choice">
          <parentRef name="render.class"/>
        </define>
        <define name="mtr.content.class" combine="choice">
          <parentRef name="render.class"/>
        </define>
      </grammar>
      <zeroOrMore>
        <choice>
          <ref name="pdata"/>
          <ref name="render.class"/>
        </choice>
      </zeroOrMore>
    </choice>
  </define>
  <define name="pdata.attribs">
    <empty/>
  </define>
  <define name="pdata.model">
    <text/>
  </define>
  <define name="pdata">
    <element name="pdata">
      <interleave>
        <ref name="pdata.attribs"/>
        <ref name="pdata.model"/>
      </interleave>
    </element>
  </define>
  <define name="iterexp">
    <grammar>
      <include href="mathml3.rng">
        <start>
          <choice>
            <ref name="PresExp"/>
            <ref name="mtr"/>
            <ref name="mlabeledtr"/>
            <ref name="mtd"/>
          </choice>
        </start>
      </include>
      <!-- 	           DefEncAtt = empty -->
      <define name="PresExp" combine="choice">
        <parentRef name="render.class"/>
      </define>
      <!-- 		   MathML.Common.attrib &= parent ntn.attrib -->
      <define name="mtable.content.class" combine="choice">
        <parentRef name="render.class"/>
      </define>
      <define name="mtr.content.class" combine="choice">
        <parentRef name="render.class"/>
      </define>
    </grammar>
  </define>
  <define name="notation.attribs">
    <interleave>
      <ref name="id.attribs"/>
      <ref name="triple.att"/>
    </interleave>
  </define>
  <define name="notation.model">
    <ref name="prototype"/>
    <zeroOrMore>
      <ref name="rendering"/>
    </zeroOrMore>
  </define>
  <define name="notation">
    <element name="notation">
      <interleave>
        <ref name="notation.attribs"/>
        <ref name="notation.model"/>
      </interleave>
    </element>
  </define>
  <!-- we extend the content and presentation models by metavariables -->
  <define name="proto.class">
    <choice>
      <ref name="exprlist"/>
      <ref name="expr"/>
    </choice>
  </define>
  <define name="render.class">
    <choice>
      <ref name="render"/>
      <ref name="iterate"/>
    </choice>
  </define>
  <define name="ntn.attrib">
    <interleave>
      <optional>
        <attribute name="cr"/>
      </optional>
      <optional>
        <attribute name="egroup"/>
      </optional>
    </interleave>
  </define>
  <define name="exprlist.attribs">
    <ref name="name.attrib"/>
  </define>
  <define name="exprlist.model">
    <zeroOrMore>
      <ref name="protoexp"/>
    </zeroOrMore>
  </define>
  <define name="exprlist">
    <element name="exprlist">
      <interleave>
        <ref name="exprlist.attribs"/>
        <ref name="exprlist.model"/>
      </interleave>
    </element>
  </define>
  <define name="expr.attribs">
    <ref name="name.attrib"/>
  </define>
  <define name="expr.model">
    <empty/>
  </define>
  <define name="expr">
    <element name="expr">
      <interleave>
        <ref name="expr.attribs"/>
        <ref name="expr.model"/>
      </interleave>
    </element>
  </define>
  <define name="iterate.attribs">
    <interleave>
      <ref name="name.attrib"/>
      <optional>
        <ref name="precedence.att"/>
      </optional>
    </interleave>
  </define>
  <define name="iterate.model">
    <interleave>
      <ref name="separator"/>
      <zeroOrMore>
        <ref name="iterexp"/>
      </zeroOrMore>
    </interleave>
  </define>
  <define name="iterate">
    <element name="iterate">
      <interleave>
        <ref name="iterate.attribs"/>
        <ref name="iterate.model"/>
      </interleave>
    </element>
  </define>
  <define name="render.attribs">
    <interleave>
      <ref name="name.attrib"/>
      <optional>
        <ref name="precedence.att"/>
      </optional>
    </interleave>
  </define>
  <define name="render.model">
    <empty/>
  </define>
  <define name="render">
    <element name="render">
      <interleave>
        <ref name="render.attribs"/>
        <ref name="render.model"/>
      </interleave>
    </element>
  </define>
  <define name="separator.attribs">
    <empty/>
  </define>
  <define name="separator.model">
    <zeroOrMore>
      <ref name="renderexp"/>
    </zeroOrMore>
  </define>
  <define name="separator">
    <element name="separator">
      <interleave>
        <ref name="separator.attribs"/>
        <ref name="separator.model"/>
      </interleave>
    </element>
  </define>
</grammar>
